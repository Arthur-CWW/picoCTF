[project]
name = "ctf-env"
version = "0.1.0"
description = "CTF Environment and Dataset Manager"
readme = "README.md"
requires-python = ">=3.8.1"
license = { text = "MIT" }
authors = [
  { name = "CTF Environment", email = "dev@example.com" },
]
keywords = ["ctf", "cybersecurity", "dataset", "environment"]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Intended Audience :: Education",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Topic :: Education",
  "Topic :: Security",
]
dependencies = [
  "pydantic>=2.10.6",
  # Core dependencies - keeping minimal for environment deployment
  "rich>=14.0.0",
  "typing-extensions>=4.0.0",  # For better type hints on older Python
  "tyro>=0.9.21",
]

[project.urls]
Homepage = "https://github.com/your-username/ctf-env"
Issues = "https://github.com/your-username/ctf-env/issues"
Repository = "https://github.com/your-username/ctf-env"

[project.scripts]
convert-picoctf = "src.ctf_dataset:convert_picoctf_to_dataset"
ctf = "src.ctf_cli_improved:main"
# ctf-cli = "src.ctf_cli:main"
ctf-dataset = "src.ctf_dataset:main"

[project.optional-dependencies]
# All optional dependencies
all = [
  "ctf-env[dev,server,analysis]",
]
# For data analysis and visualization
analysis = [
  "pandas>=1.5.0",
  "matplotlib>=3.5.0",
  "seaborn>=0.11.0",
  "jupyter>=1.0.0",
]
# For development and type checking
dev = [
  "mypy>=1.0.0",
  "black>=23.0.0",
  "isort>=5.10.0",
  "flake8>=7.0.0",
  "pytest>=7.0.0",
  "pytest-asyncio>=0.21.0",
]
# For web server/API functionality
server = [
  "fastapi>=0.95.0",
  "uvicorn[standard]>=0.20.0",
  "pydantic>=2.0.0",
  "httpx>=0.24.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.black]
line-length = 100
target-version = ["py38"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
addopts = [
  "--strict-markers",
  "--strict-config",
  "--verbose",
]
markers = [
  "slow: marks tests as slow",
  "integration: marks tests as integration tests",
]
python_classes = ["Test*"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
testpaths = ["tests"]
